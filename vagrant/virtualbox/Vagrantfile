# -*- mode: ruby -*-
# vi: set ft=ruby :
#
# This Vagrantfile is for quick making a multi-host environment
# to experiment & play with Teleport.
#
#   1. Creates two VMs
#   2. Based on Debian Jessie 8
#   3. With private networking
#   4. With Docker installed
#
NODEA ||= "10.0.10.30"
NODEB ||= "10.0.10.31"
DOCKER_VER ||= "1.10.3"
VM_BUILDIR ||= "tmp"

Vagrant.configure(2) do |config|
  config.vm.box = "debian/jessie64"
  config.vm.box_check_update = false

  basic_config(config.vm)
  configure_ssh(config.vm)
  apt_update(config.vm)
  install_docker(config.vm, DOCKER_VER)
  install_go(config.vm)

  config.vm.synced_folder "../../", "/home/vagrant/teleport"

  config.vm.define "telenode-a" do |config|
      config.vm.hostname = "telenode-a"
      config.vm.network "private_network", ip: NODEA
      config.vm.provider "virtualbox" do |vb|
          vb.name = "telenode-a"
          vb.cpus = 2
          vb.memory = 1024
      end
  end

  config.vm.define "telenode-b" do |config|
      config.vm.hostname = "telenode-b"
      config.vm.network "private_network", ip: NODEB
      config.vm.provider "virtualbox" do |vb|
          vb.name = "telenode-b"
          vb.cpus = 2
          vb.memory = 1024
      end
  end
end

def install_docker(vm, docker_version)
  vm.provision "file", source: '../docker.service', destination: '/tmp/docker.service'
  vm.provision "file", source: '../docker.socket', destination: '/tmp/docker.socket'

  vm.provision "shell", inline: <<-SHELL
    echo "Installing Docker..."
    groupadd docker
    gpasswd -a vagrant docker
    ls /tmp/docker*
    mv /tmp/docker* /etc/systemd/system/
    if [ ! -s /usr/bin/docker ]; then
        echo "Downloading Docker #{docker_version}..."
        wget -qO /usr/bin/docker https://get.docker.com/builds/Linux/x86_64/docker-#{docker_version} 
        chmod +x /usr/bin/docker
    fi
    systemctl daemon-reload
    systemctl enable docker.socket
    systemctl enable docker.service
    echo "Starting Docker..."
    systemctl restart docker
  SHELL
end

def install_go(vm)
  vm.provision "shell", privileged: false, inline: <<-SHELL
    BASHRC="/home/vagrant/.bashrc"
    export GOROOT=/opt/go
    export GOPATH=~/go
    export PATH=$PATH:$GOROOT/bin:$GOPATH/bin
  
    # download go and place it into /opt
    if [ ! -f /opt/go/bin/go ]; then
        echo "Downloading Go..."
        cd /tmp && curl --silent https://storage.googleapis.com/golang/go1.5.3.linux-amd64.tar.gz | tar -xz
        sudo mv /tmp/go $GOROOT
        sudo chown vagrant:vagrant $GOROOT
    fi

    # configure GOROOT and PATH to include the install directory for GO:
    if ! grep -q GOPATH $BASHRC ; then 
        mkdir -p $GOPATH/bin $GOPATH/src 
        echo -e "\n# Go vars" >> $BASHRC
        echo "export GOROOT=$GOROOT" >> $BASHRC
        echo "export GOPATH=$GOPATH" >> $BASHRC
        echo "export PATH=\$PATH:\$GOROOT/bin:\$GOPATH/bin" >> $BASHRC
    fi
    mkdir -p $HOME/go/src/github.com/gravitational
    ln -fs $HOME/teleport $HOME/go/src/github.com/gravitational/teleport
    cd $HOME/go/src/github.com/gravitational/teleport; make -C $HOME/go/src/github.com/gravitational/teleport install
    SHELL
end



# this updates all apt packages (especially important for VirtualBox guest addition packages)
def apt_update(vm)
  vm.provision "shell", inline: <<-SHELL
    if [ ! -f /root/apt.updated ]; then
        apt-get -y update
        apt-get -y upgrade
        apt-get -y dist-upgrade
        apt-get -y install htop tree vim aufs-tools
        apt-get -y purge exim4-*
        apt-get -y autoremove
        touch /root/apt.updated
    fi
  SHELL
end



# basic/recommended configuration of every machine:
def basic_config(vm)
  bashrc="/home/vagrant/.bashrc"
  vm.provision "shell", inline: <<-SHELL
    if ! grep -q "git-core" #{bashrc} ; then 
        echo "customizing ~/bashrc"
        echo "\n\n# Customizations from Vagrantfile:" >> #{bashrc}
        echo "export PS1='\\[\\033[31;1m\\]\\h\\[\\033[0;32m\\] \\w\\[\\033[00m\\]: '" >> #{bashrc}
        echo export PATH="\$PATH:/usr/lib/git-core" >> #{bashrc}
        echo export GREP_OPTIONS="--color=auto" >> #{bashrc}
        echo "alias ll='ls -lh'" >> #{bashrc}
    fi
  SHELL
end


# re-creates clean ~/.ssh on a VM, populated with your (host) ssh credentials
def configure_ssh(vm)
  vm.provision "shell", inline: <<-SHELL
    mkdir -p /home/vagrant/.ssh
    rm -rf /home/vagrant/.ssh/id_rsa*
    chown vagrant:vagrant /home/vagrant/.ssh
  SHELL
  vm.provision "file", source: '~/.ssh/id_rsa', destination: '~/.ssh/id_rsa'
  vm.provision "file", source: '~/.ssh/id_rsa.pub', destination: '~/.ssh/id_rsa.pub'
end
