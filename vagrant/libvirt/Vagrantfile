# -*- mode: ruby -*-
# vi: set ft=ruby :
#
# This Vagrantfile is for quick making a multi-host environment
# to experiment & play with Teleport.
#
#   1. Creates several identical VMs
#   2. Based on Debian Jessie 8
#   3. With private networking
#   4. With Docker installed
#
# NOTE: uses libvirt/KVM instead of Virtualbox

A_AUTH  ||= "10.0.10.10"
A_PROXY ||= "10.0.10.11"
A_NODE  ||= "10.0.10.12"

B_AUTH  ||= "10.0.20.20"
B_PROXY ||= "10.0.20.21"
B_NODE  ||= "10.0.20.22"

DOCKER_VER ||= "1.10.3"
VM_BUILDIR ||= "tmp"

Vagrant.configure(2) do |config|
  config.vm.box = "http://s3.gravitational.io/vms/libvirt-debian.box"
  config.vm.box_check_update = false

  basic_config(config.vm)
  configure_ssh(config.vm)
  apt_update(config.vm)
  install_docker(config.vm, DOCKER_VER)

  config.vm.synced_folder "../../", "/home/vagrant/teleport", type: "9p", disabled: false, accessmode: "mapped"
  nodes = {
    "a-auth"  => A_AUTH, 
    "a-proxy" => A_PROXY, 
    "a-node"  => A_NODE,

    "b-auth"  => B_AUTH, 
    "b-proxy" => B_PROXY, 
    "b-node"  => B_NODE
  }
  nodes.each do |role, addr|
      dir  = "data/#{role}"
      FileUtils.mkpath(dir)
      config.vm.define role do |config|
          config.vm.hostname = role
          config.vm.network "private_network", ip: addr
          config.vm.synced_folder dir, "/opt/teleport", type: "9p", disabled: false, accessmode: "mapped"
          config.vm.provider "libvirt" do |vb|
              vb.driver = "kvm"
              vb.cpus = 1
              vb.memory = 512
          end
      end
  end 
end

def install_docker(vm, docker_version)
  vm.provision "file", source: '../docker.service', destination: '/tmp/docker.service'
  vm.provision "file", source: '../docker.socket', destination: '/tmp/docker.socket'

  vm.provision "shell", inline: <<-SHELL
    echo "Installing Docker..."
    groupadd docker
    gpasswd -a vagrant docker
    ls /tmp/docker*
    mv /tmp/docker* /etc/systemd/system/
    if [ ! -s /usr/bin/docker ]; then
        echo "Downloading Docker #{docker_version}..."
        wget -qO /usr/bin/docker https://get.docker.com/builds/Linux/x86_64/docker-#{docker_version} 
        chmod +x /usr/bin/docker
    fi
    systemctl daemon-reload
    systemctl enable docker.socket
    systemctl enable docker.service
    echo "Starting Docker..."
    systemctl restart docker
  SHELL
end


# this updates all apt packages (especially important for VirtualBox guest addition packages)
def apt_update(vm)
  vm.provision "shell", inline: <<-SHELL
    if [ ! -f /root/apt.updated ]; then
        apt-get -y update
        apt-get -y purge exim4-* libcairo*
        apt-get -y autoremove
        apt-get -y upgrade
        apt-get -y dist-upgrade
        apt-get -y install htop tree vim aufs-tools screen
        touch /root/apt.updated
    fi
  SHELL
end



# basic/recommended configuration of every machine:
def basic_config(vm)
  bashrc="/home/vagrant/.bashrc"
  vm.provision "shell", inline: <<-SHELL
    if ! grep -q "git-core" #{bashrc} ; then 
        echo "customizing ~/bashrc"
        echo "\n\n# Customizations from Vagrantfile:" >> #{bashrc}
        echo "export PS1='\\[\\033[31;1m\\]\\h\\[\\033[0;32m\\] \\w\\[\\033[00m\\]: '" >> #{bashrc}
        echo export PATH="\$PATH:/usr/lib/git-core:/home/vagrant/teleport/build" >> #{bashrc}
        echo export GREP_OPTIONS="--color=auto" >> #{bashrc}
        echo "alias ll='ls -lh'" >> #{bashrc}
    fi
    mkdir -p /var/lib/teleport
    chown vagrant /var/lib/teleport
  SHELL
end


# re-creates clean ~/.ssh on a VM, populated with your (host) ssh credentials
def configure_ssh(vm)
  vm.provision "shell", inline: <<-SHELL
    mkdir -p /home/vagrant/.ssh
    rm -rf /home/vagrant/.ssh/id_rsa*
    chown vagrant:vagrant /home/vagrant/.ssh
  SHELL
  vm.provision "file", source: '~/.ssh/id_rsa', destination: '~/.ssh/id_rsa'
  vm.provision "file", source: '~/.ssh/id_rsa.pub', destination: '~/.ssh/id_rsa.pub'
  vm.provision "file", source: '~/.screenrc', destination: '~/' if File.exists? "~/.screnrc"
end
